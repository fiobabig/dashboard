rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    match /{document=**} {
      allow read, write: if false;
    }

    match /users/{uid} {
      allow read: if isOwner(uid) || hasReadRole(resource); 
      allow write: if isOwner(uid);
    }

    match /tokens/{token} {
      allow read: if isSignedIn();

      allow create: if isValidTokenCreate();

      allow update: if isValidTokenUpdate();
    }

    match /dashboards/{uid} {
      allow read: if isOwner(uid) || hasReadRole(resource);

      allow write: if hasWriteRole(resource);

      allow delete: if hasDeleteRole(resource);
    }

    match /rolestest/{doc} {
      allow read: if hasReadRole(resource);

      allow update: if hasWriteRole(resource);

      allow delete: if hasDeleteRole(resource);
    }
    
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function hasReadRole(resource) {
    return hasRole(resource, ["read", "edit", "owner"]);
  }

  function hasWriteRole(resource) {
    return hasRole(resource, ["edit", "owner"]);
  }

  function hasDeleteRole(resource) {
    return hasRole(resource, ["owner"]);
  }

  function hasRole(resource, roles) {
    return isSignedIn() && resource.data.roles[request.auth.uid] in roles;
  }    

  function isOwner(uid) {
    return isSignedIn() && request.auth.uid == uid;
  }

  function isValidTokenCreate() {
    let incoming = request.resource.data;

    let isOwner = isOwner(incoming.dashboardUid); 
    let isNow = request.time == incoming.createdAt;
    let hasRequiredFields = incoming.keys()
      .hasAll(["createdAt", "dashboardUid"]);
    let hasOnlyFields = incoming.keys()
      .hasOnly(["createdAt", "dashboardUid"]);

    return 
      isOwner &&
      isNow &&
      hasRequiredFields &&
      hasOnlyFields;
  }

  function isValidTokenUpdate() {    
    let incoming = request.resource.data;

    let isOwner = isOwner(incoming.ownerUid);   
    let hasRequiredFields = incoming.keys()
      .hasAll(["ownerUid"]);
    let hasOnlyFields = incoming.diff(resource.data).affectedKeys()
      .hasOnly(["ownerUid"]); 

    return 
      isOwner &&
      hasRequiredFields &&
      hasOnlyFields;
  }
}